#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script is intended to set up a new Linux desktop machine with my dotfiles
# and other development preferences.
#
# Much of this script was derived from thoughtbot's now unsupported Linux
# version of Laptop.
# https://github.com/thoughtbot/laptop/tree/39768b19959f74724ed0c0ea92e5b2f6f78e45c1
# and
# https://github.com/joshukraine/linux-bootstrap
################################################################################
set -e

# Thank you, thoughtbot! :)
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "[linux-bootstrap] $fmt\n" "$@"
}

osname=$(uname)
bootstrap_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup
DOTFILES_REPO_URL="https://github.com/robsdudeson/dotfiles.git"
DOTFILES_BRANCH="master"
DOTFILES_DIR=$HOME/dotfiles

bootstrap_echo "Let's bootstrap some Linux"
bootstrap_echo "checking for Linux..."
if [ $osname != "Linux" ]; then
  bootstrap_echo "Looks like we're trying to run on a non-Linux system.  BAIL!"
  exit 1
else 
  bootstrap_echo "We're on linux!"
fi

bootstrap_echo "checking sudo..."
command -v sudo >/dev/null
[ $? != 0 ] && bootstrap_echo "missing sudo, please install as root" && exit 1

if [ "$EUID" != 0 ]; then
  bootstrap_echo "we need sudo access to continue."
  sudo echo "I'm Sudo"
else
  bootstrap_echo "We're all sudoed up!"
fi

bootstrap_echo "checking apt..."
command -v apt >/dev/null 
if [ $? != 0 ]; then
  bootstrap_echo "installing apt"
  sudo apt-get install -y apt
else
  bootstrap_echo "using apt"
fi

bootstrap_echo "Step 1: upgrading the system..."
sudo apt update
sudo apt -y upgrade
bootstrap_echo "we're upgraded!"

bootstrap_echo "Step 2: Installing basic tools..."
bootstrap_echo "Installing build-essential..."
sudo apt install -y build-essential

bootstrap_echo "Installing curl ..."
sudo apt install -y curl

bootstrap_echo "Installing python software properties..."
sudo apt install -y software-properties-common

bootstrap_echo "Installing other useful libraries..."
#sudo apt install -y zlib1g-dev libssl-dev libreadline-dev libyaml-dev libsqlite3-dev libxml2-dev libxslt1-dev libcurl4-openssl-dev libffi-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip

bootstrap_echo "Installing git..."
sudo apt install -y git

bootstrap_echo "Installing snap..."
sudo apt install -y snapd

bootstrap_echo "Installing authy..."
sudo snap install authy --beta

bootstrap_echo "Installing zsh..."
sudo apt install -y zsh

bootstrap_echo "Installing powerlevel10k for zsh..."
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k

bootstrap_echo "Installing asdf..."
ASDF_INSTALL_TARGET=~/.asdf
if [ -d "$ASDF_INSTALL_TARGET" ]
then
  bootstrap_echo "asdf is already installed at ${ASDF_INSTALL_TARGET}"
else
  git clone https://github.com/asdf-vm/asdf.git ${ASDF_INSTALL_TARGET} --branch v0.7.8
  bootstrap_echo "asdf is installed at ${ASDF_INSTALL_TARGET}"
fi

bootstrap_echo "Installing erlang..."
erlang_version='22.0.4'
asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git || echo ""
asdf install erlang $erlang_version
asdf global erlang $erlang_version

bootstrap_echo "Installing elixir..."
elixir_version='1.9.0'
asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git || echo ""
asdf install elixir $elixir_version
asdf global elixir $elixir_version

bootstrap_echo "Installing ruby..."
ruby_version='2.6.3'
asdf plugin-add ruby https://github.com/asdf-vm/asdf-ruby.git || echo ""
asdf install ruby $ruby_version
asdf global ruby $ruby_version

bootstrap_echo "Installing python..."
python2_version='2.7.17'
python3_version='3.8.2'
asdf plugin-add python || echo ""
asdf install python $python2_version
asdf install python $python3_version
asdf global python $python2_version $python3_version
bootstrap_echo "remeber to use 'asdf reshim python' after installing things with 'pip'"

bootstrap_echo "Installing vscode..."
command -v code >/dev/null 
if [ $? != 0 ]; then
  sudo snap install --classic code # or code-insiders
fi

bootstrap_echo "Step 3: Installing dotfiles..."
if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning your dotfiles repo to ${DOTFILES_DIR} ..."
git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"
source "$DOTFILES_DIR"/install

bootstrap_echo "Sym-linking bin utilities..."
bin_target="$HOME"/bin/
if [ ! -L "$bin_target" ]; then
  ln -s "$bin_target" "$bootstrap_dir"/bin/
  bootstrap_echo "$bin_target created!"
else
  bootstrap_echo "[WARN] $bin_target already exists"
fi
bootstrap_echo "Done!"

printf "\n******************************************************************\n"
printf "\n**** Bootstrap script complete! Please restart your computer. ****\n"
printf "\n******************************************************************\n"
